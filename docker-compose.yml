version: '3.8'

services:
  rest-catalog:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rest-catalog
    ports:
      - "3000:3000"
    environment:
      - DB_TYPE=${DB_TYPE:-memory}
      - DB_PATH=/app/data/catalog.db
      - PORT=3000
      - NODE_ENV=${NODE_ENV:-development}
      # PostgreSQL configuration (if using postgres)
      - DB_NAME=${DB_NAME:-catalog}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      # S3/MinIO configuration
      - WAREHOUSE_PATH=${WAREHOUSE_PATH:-s3://warehouse}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioadmin}
      - S3_ENDPOINT=${S3_ENDPOINT:-http://minio:9000}
    volumes:
      # Mount data directory for SQLite persistence
      - catalog_data:/app/data
      # Mount warehouse directory for Iceberg table data
      - iceberg_warehouse:/app/warehouse
    networks:
      - iceberg-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/v1/config', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  spark:
    platform: linux/x86_64
    image: alexmerced/spark35nb:latest
    container_name: spark-notebook
    ports:
      - "8080:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master Port
      - "8888:8888"  # Jupyter Notebook
      - "4040:4040"  # Spark Application UI
    environment:
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-minioadmin}
      - SPARK_MASTER_URL=spark://spark:7077
      - SPARK_DRIVER_MEMORY=2g
      - SPARK_EXECUTOR_MEMORY=2g
      # REST Catalog configuration for Spark
      - CATALOG_URI=http://rest-catalog:3000/v1
      - WAREHOUSE_PATH=${WAREHOUSE_PATH:-s3://warehouse}
      - S3_ENDPOINT=${S3_ENDPOINT:-http://minio:9000}
    volumes:
      # Share warehouse directory with catalog
      - iceberg_warehouse:/opt/spark/warehouse
      # Notebooks persistence
      - spark_notebooks:/home/jovyan/work
    networks:
      - iceberg-network
    depends_on:
      rest-catalog:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped

  # MinIO S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Console
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID:-minioadmin}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY:-minioadmin}
      - MINIO_REGION_NAME=${AWS_REGION:-us-east-1}
    volumes:
      - minio_data:/data
    networks:
      - iceberg-network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO client for bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    networks:
      - iceberg-network
    depends_on:
      minio:
        condition: service_healthy
    volumes:
      - ./scripts:/scripts
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID:-minioadmin} ${AWS_SECRET_ACCESS_KEY:-minioadmin};
      /usr/bin/mc mb minio/warehouse --ignore-existing;
      /usr/bin/mc policy set public minio/warehouse;
      echo 'MinIO initialization completed';
      "
    restart: "no"

  # Optional: PostgreSQL database for production use
  postgres:
    image: postgres:15-alpine
    container_name: catalog-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-catalog}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - iceberg-network
    restart: unless-stopped
    # Only start if explicitly configured
    profiles:
      - postgres

volumes:
  catalog_data:
    driver: local
  iceberg_warehouse:
    driver: local
  spark_notebooks:
    driver: local
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  iceberg-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16